!<arch>
0-isupper.c/    0           0     0     644     248       `
#include "main.h"

/**
 * _isupper - a function that checks for uppercase character
 * @c: chars under consideraton
 * Return: 1 if true and 0 if lower
 */

int _isupper(int c)
{
	if (c <= 'Z' && c >= 'A')
	{
		return (1);
	}
	else
		return (0);
}
0-memset.c/     0           0     0     644     411       `
#include "main.h"

/**
 * _memset - a function that fills memory with a constant byte
 * @s: a char pointer to a values address
 * @b: a character value whose address can be pointed to
 * @n: an unsigned integer indicating no of bytes to be filled
 * Return: memory that is filled
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     394       `
# include "main.h"

/**
 * *_strcat - a function that concatenates two strings
 * @dest: pointer to the initial string
 * @src: pointer to the string that is added (catenated) to the initial string
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = j = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	while ((dest[i] = src[j]) != '\0')
	{
		i++;
		j++;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     454       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string under consideration pointer to its val
 * Return: the integer
 */

int _atoi(char *s)
{
	int c = 0;
	unsigned int n = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			n = (n * 10) + (s[c] = '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}
		c++;
	}
	n *= min;
	return (n);
}
1-isdigit.c/    0           0     0     644     217       `
#include "main.h"

/**
 * _isdigit - prints digit
 * @c: integer under condsideration
 * Return: 1 true or 0 false
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     364       `
#include "main.h"

/**
 * _memcpy - a function that copies memory area
 * @dest: the final string
 * @src: the source string under consideration
 * @n: number of characters in the string
 *
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     571       `
# include "main.h"

/**
 * _strncat - a function that concatenates two strings
 * @dest: pointer to the initial string
 * @src: pointer to the string that is added (catenated) to the initial string
 * @n: an integer indicating the number of bytes allowed in the src object, ie
 * add n characters to src
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = j = 0;
	while (*(dest + i))
	{
		i++;
	}
	while (j < n && *(src + j))
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}
	if (j < n)
	{
		*(dest + i) = *(src + j);
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     327       `
#include "main.h"

/**
 * _strchr - a function that locates a character in a string
 * @s: a string
 * @c: character
 * Return: a character from the string
 */

char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
		{
			s++;
		}
		else
		{
			return (s);
		}
	}
	if (c == '\0')
	{
		return (s);
	}
	return (NULL);
}

2-strlen.c/     0           0     0     644     237       `
#include "main.h"

/**
 * _strlen - a function that returns the length of a  string
 *
 * @s: string input
 *
 * Return: Always 0 (Success)
 */

int _strlen(char *s)
{
	int len;

	for (len = 0; *s != '\0'; s++)
		len++;
	return (len);
}

2-strncpy.c/    0           0     0     644     460       `
#include "main.h"

/**
* _strncpy -  a function that copies a string
* @dest: pointer to base string being concatenated on
* @src: string beng catenated with a limit to its
* @n: max no of str chars to cat to dest,pad with eof
* Return: dest
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;
	int j;

	i = j = 0;
	while (i < n && *(src + i))
	{
		*(dest + i) = *(src + i);
		i++;
	}
	while (i < n)
	{
		*(dest + i) = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     289       `
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * @c: char under consideration
 * Return: 1 if lowercase, 0 if otherwise
 * Description: A case checker
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     243       `
#include "main.h"

/**
 * _puts - a function that prints a string, followed by a new line, to stdout
 *
 * @str: string pointer
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		putchar(str[i]);
	}
	putchar('\n');
}

3-strcmp.c/     0           0     0     644     409       `
#include "main.h"

/**
 * _strcmp -  a function that compares two strings returns <0 if s1 < s2
 * @s1: the string which the other is compared against
 * @s2: this string is compared to the first argument
 * Return: the difference in the two strings
 */

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] == s2[i]; i++)
	{
		if (s1[i] == '\0')
		{
			return (0);
		}
	}
	return (s1[i] - s2[i]);
}

3-strspn.c/     0           0     0     644     460       `
#include "main.h"

/**
 * _strspn -  a function that gets the length of a prefix substring
 * @s: the substringunder consideration
 * @accept: no of bytes to accept form the substring
 * Return: number of bytes in the initial segment of s, bytes of acce[t
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int len;

	len = 0;
	if ((s == NULL) || (accept == NULL))
		return (len);

	while (*s && strchr(accept, *s++))
	{
		len++;
	}
	return (len);
}
4-isalpha.c/    0           0     0     644     289       `
#include "main.h"

/**
 * _isalpha - finds letter of alphabet
 * @c: character under consideration
 * Return: 1 if letter and 0 if not letter
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

4-strpbrk.c/    0           0     0     644     436       `
#include "main.h"

/**
 * _strpbrk - a function that searches a string for any of a set of bytes
 * @s: substring under consideration
 * @accept: mo of byters to accept for s
 * Return: pointer to the byte in s that matches one of the bytes in accept
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     559       `
#include "main.h"

/**
 * _strstr - a function that locates a substring
 * @haystack:string under consideration
 * @needle:the first occurrence of the substring needle
 * Return: pointer to the beginning of the located substring, or NULL
 */

char *_strstr(char *haystack, char *needle)
{
	unsigned int i = 0, j = 0;

	while (haystack[i])
	{
		while (needle[j] && (haystack[i] == needle[0]))
		{
			if (haystack[i + j] == needle[j])
				j++;
			else
				break;
		}
		if (needle[j])
		{
			i++;
			j = 0;
		}
		else
			return (haystack + 1);
	}
	return (0);
}

6-abs.c/        0           0     0     644     235       `
#include "main.h"

/**
 * _abs - get value of int
 * @n: integer under consideration
 * Return: n for positive -n for negative
 */

int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else if (n < 0)
	{
		return (-n);
	}
	return (0);
}

9-strcpy.c/     0           0     0     644     0         `
main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     204       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: the character to print
 * Return: on success 1, on err -1 and errno
 */

int _putchar(char c)
{
	return (write(1, &c, 1));
}
